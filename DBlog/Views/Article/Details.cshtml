@model DBlog.Entity.Article

@{
    ViewData["Title"] = "Article Details";
     var isAuthor = User.Identity.Name == Model.User.UserName;
}


<style>
     body {
        background: linear-gradient(to bottom right, #f0f8ff, #ffffff);
        background-image: radial-gradient(circle, rgba(0, 0, 0, 0.1) 1px, transparent 1px),
            radial-gradient(circle, rgba(0, 0, 0, 0.1) 1px, transparent 1px);
        background-size: 20px 20px;
        background-position: 0 0, 10px 10px;

        text-align: center;
        min-height: 400px;
    }

    .container {
        max-width: max-content;
        padding: 0;
    }
     .cont_hugh {
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);

    }
     .article_title {
        color: #4c4b4b;
        font-size: 2em;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        margin: 20px 0;
    }
    .image-wrapper {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        width: 100%;
        padding: 0 2rem;

    }

    .image-wrapper img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 2rem;
    }
    .content_model{
        padding: 2rem;
    }
    .comments_container{
        padding: 2rem;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
    }
    .comment_img{
        padding: 1rem;
    }
     .comment_img img{border: 1px solid #4c4b4b;
        border-radius: 100%;
        background-color: #4c4b4b;}
    .user_comment_section{
        display: flex;
        flex-direction: column;
        text-align: justify;
        padding:0 1rem;

    }
     footer.footer {
            background: linear-gradient(to bottom right, #e0f7fa, #ffffff);
            color: #666666;
            font-family: 'Open Sans', sans-serif;
            font-size: small;

        }
</style>
<div class="container">
    <div class="cont_hugh mt-3 w-75 m-auto">
    <h1 class="article_title">@Model.Title</h1>
    <div class="d-flex gap-2 mb-3 justify-content-end">

        @if (User.IsInRole("admin"))
        {
            <a href="@Url.Action("Edit", new { id = Model.Id })" class="btn btn-warning">Edit</a>
            <form method="post" asp-action="Delete" asp-route-id="@Model.Id"
                onsubmit="return confirm('Are you sure you want to delete this article?');">
                <button type="submit" class="btn btn-danger">Delete</button>
            </form>
        }

    </div>
    <i class="d-flex justify-content-end mb-4 user-select-none">Published on:@Model.PublishedDate.ToString("MMMM dd, yyyy")</i>
<div class="mr-auto image-wrapper">
    @if (!string.IsNullOrEmpty(Model.ImageFile))
    {
        <div class="mb-3">
            <img src="@Model.ImageFile" alt="@Model.Title" style="user-select: none;" />
        </div>
    }
</div>
   <div class="content_model"> <p style="text-align: justify; line-height: 1.75rem;">@Model.Content</p></div>

</div>
<div class="comments_container mt-3 w-75 m-auto">
    <h3>Comments</h3>

    <form id="commentForm" method="post" asp-action="AddComment">
        <input type="hidden" name="articleId" value="@Model.Id" />
        <div class="mb-3">
        
            @if (ViewData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger mt-2" id="errorMessage">
                    @ViewData["ErrorMessage"]
                </div>
            }
        </div>
        @if (!isAuthor)
{
    <form id="commentForm" method="post" asp-action="AddComment">
        <input type="hidden" name="articleId" value="@Model.Id" />
        <div class="mb-3">
            <textarea name="content" class="form-control" rows="3" placeholder="Add a comment..."
                id="commentContent"></textarea>
            @if (ViewData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger mt-2" id="errorMessage">
                    @ViewData["ErrorMessage"]
                </div>
            }
        </div>
        <button type="submit" class="btn btn-primary">Add Comment</button>
    </form>
     <div id="emojiPicker" style="display:none;"></div>
}
else
{
    <p class="">You cannot comment on your own article.</p>
}

    </form>

    @if (Model.Comments != null && Model.Comments.Any())
    {
        @foreach (var comment in Model.Comments.OrderByDescending(c => c.CommentDate))
        {
            <div class="mt-3 mb-3 border p-3 rounded  justify-content-between">
                <div class="d-flex comment_img">
                     @if (!string.IsNullOrEmpty(comment.User.Image))
        {
            <img class="ml-auto" src="~/img/@comment.User.Image" alt="@comment.User.UserName" style="width: 100px; height: 100px; object-fit: cover;" />
        }               <div class="user_comment_section">
                    <strong class="ml-auto"> @(comment.User.Name != null ? comment.User.Name : "Unknown")</strong>
                    <div>
                        <p>@comment.Content</p>
                         <small>@comment.CommentDate.ToString("g")</small>
                     </div>
                     </div>
                </div>
               

            </div>
        }
    }
    else
    {
        <p class="mt-3">No comments yet. Be the first to comment!</p>
    }
</div>
</div>
<footer class="text-center footer mt-4 py-4 w-100">
        <p class="mt-2 user-select-none">&copy; 2024 My Blog. All rights reserved.</p>
    </footer>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var errorMessage = document.getElementById('errorMessage');
            if (errorMessage) {
                alert(errorMessage.textContent);
            }

            var form = document.getElementById('commentForm');
            var commentContent = document.getElementById('commentContent');

            form.addEventListener('submit', function (event) {
                var content = commentContent.value.trim();
                if (content === '') {
                    alert('Comment content cannot be empty.');
                    event.preventDefault();
                } else if (content.length < 15 || content.length > 100) {
                    alert('Comment must be between 15 and 100 characters.');
                    event.preventDefault();
                }
            });
        });
    </script>
   
     <script src="https://unpkg.com/emoji-mart/dist/emoji-mart.js"></script>
}
